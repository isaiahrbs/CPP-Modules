#include "Fixed.hpp"
#include <cmath>
#include <iostream>


// Fixed point: un chiffre a virgule mais c'est un int, on divise les bits du int
// pour une partie chiffre entier et un en virgule.
// c’est une façon de représenter un nombre à virgule (ex: 42.42) en utilisant un entier.

/*
	equal to:

	Fixed::Fixed() : _value(0) {
*/
Fixed::Fixed() {
	std::cout << "Default constructor called" << std::endl;
	_value = 0;
}

Fixed::Fixed(const int num) {
	std::cout << "Int constructor called" << std::endl;
	_value = num << _fractionalBits;
}

/*
	decale la virgule de 8 bits (num * 256)
	je multiplie mon float de 256 pour transformer la partie apres la virgule en entier
	exemple : 42.42 * 256 = 10859.52
	jutilise roundf pour arrondir lresultat (10860)
	je stock ce nombre dans _value
	en gros je fais * 256 pour avoir un chiffre que si je divise par 256 ca me redonne le bon chiffre
	c tres smart

	le trcu des fractional bits je fais << 1 car si je veux changer les bits a 10
	ou + (en gros changer la precision) le code permet somehow de gerer ca si je fais << 1
*/
Fixed::Fixed(const float num) {
	std::cout << "Float constructor called" << std::endl;
	_value = roundf(num * (1 << _fractionalBits));
}

Fixed::Fixed(const Fixed& objcopy) {
	std::cout << "Copy constructor called" << std::endl;
	_value = objcopy._value;
}

Fixed& Fixed::operator=(const Fixed& other) {
	std::cout << "Copy assignment operator called" << std::endl;
	if (this != &other)
		_value = other.getRawBits();
	return *this;
}

Fixed::~Fixed() {
	std::cout << "Destructor called" << std::endl;
}

float Fixed::toFloat() const {
	return (float)_value / (1 << _fractionalBits);
}

int Fixed::toInt() const {
	return _value >> _fractionalBits;
}


int Fixed::getRawBits() const {
	std::cout << "getRawBits member function called" << std::endl;
	return _value;
}

void Fixed::setRawBits(const int raw) {
	std::cout << "setRawBits member function called" << std::endl;
	_value = raw;
}

std::ostream& operator<<(std::ostream& out, const Fixed& value) {
    out << value.toFloat();
    return out;
}

/*
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⡶⡖⣿⠿⣿⡕⠀⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣏⣭⠿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡽⢿⣥⠷⠉⠹⢧⣻⣍⣘⣓⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⢇⣀⡠⣟⢾⣹⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠿⡟⠟⠋⠀⠀⡀⠀⠸⣿⠁⢻⣤⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⢀⣈⠙⠛⠛⠿⠚⠿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢲⡿⢂⣡⣴⢪⡔⠂⠉⠀⠀⣸⣿⢵⡅⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠄⠦⣙⠻⣷⣶⣶⣴⣼⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡴⣞⣫⠭⠗⠚⠀⠁⠀⠀⠐⣿⡧⣹⠨⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⠀⠈⠹⠹⠽⣫⢷⣻⢿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢸⣟⣿⣹⡶⠎⠝⡠⡄⠀⠀⠀⢸⣿⣍⣏⡄⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡄⠀⠀⢀⠶⠴⠶⡶⣶⢶⣶⣛⣾⡿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣰⣯⣯⡽⣷⣟⢿⠷⠉⠀⠀⠀⠀⢀⣿⡟⡹⠢⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⠀⠀⠢⠤⢾⠶⠿⠿⠻⠷⢳⣶⣶⣿⣿⣦⣄⣀⣠⣤⣤⣤⣴⣶⣶⡶⣶⣾⣿⣻⣉⡿⢷⡶⠶⠦⣤⣤⣤⣤⣴⣶⣾⣿⣿⣷⣿⠶⢾⣙⣡⣢⠤⠤⣀⡘⠾⠂⣟⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠀⠀⠀⢠⣴⣶⣾⣿⣿⣿⠿⠟⠛⠋⠉⠛⣿⣷⠹⢿⣿⣯⠉⠉⠷⣿⣻⣿⠿⣟⡙⠣⣀⣼⣶⢿⣽⣿⣿⣿⡿⢿⣿⣿⣿⣿⡿⢿⡽⣶⣖⣛⡀⠀⡀⡦⠅⢹⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⠀⢀⠾⠛⢻⣿⣛⡟⠙⠀⠀⠀⠀⣠⣶⣿⠎⠉⠃⠀⠀⢹⣦⣄⡴⢿⣽⣯⣿⡿⣿⣦⣿⠟⠑⠊⠈⠙⢿⣿⣷⣼⡉⠛⠻⣿⣿⣷⣷⣲⡌⠁⠈⠁⠀⠤⢣⣿⣿⢫⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡆⠈⢰⣾⣿⠿⣏⠁⠀⠀⠀⠀⠀⢻⣿⣿⠄⠀⠀⠀⠀⠈⠿⠋⠀⠀⠉⠻⠟⠁⠈⠉⠉⠀⡄⠀⠀⠀⠈⢿⣿⣿⠃⠀⠀⠀⠈⢙⣿⣿⣿⡿⠶⠖⠀⣠⣿⣿⣿⡌⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⣼⣿⠫⠄⣳⠎⠁⠀⠀⠀⠀⠀⠀⠛⠯⢅⣢⢄⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⡀⠀⠀⠸⣷⠁⠀⠀⠀⠀⠀⠰⢨⣌⠛⣿⢿⣷⣤⣼⣿⡟⣶⡭⢸⠉⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠿⣿⢩⣽⣿⣷⢶⠶⣶⣶⡦⣤⣄⡀⠀⠀⠀⠈⠙⢦⡄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠚⠉⠀⠀⠀⠀⠀⣠⣤⣶⣿⣷⣶⠖⠎⢻⣜⡶⠹⣛⣿⣿⣿⠎⣿⡡⠂⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣼⣧⡾⠶⢿⣿⠋⠀⣾⣿⡟⢛⠟⠛⢻⣋⠲⢄⠀⠀⠀⠈⢣⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡐⠁⠀⠀⠀⠀⣠⡶⠟⢻⣿⠋⠉⡿⣿⣗⣀⠈⢻⡇⠀⠀⠿⣿⣿⡔⢯⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣾⡏⣿⠃⠀⠀⠸⣿⠀⠀⣿⣿⣿⣿⣶⣤⣼⣿⠂⢸⣇⠀⠀⠀⣸⢠⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣀⠀⠀⠀⠠⣾⠋⠀⣾⣿⣿⣶⣶⣿⣿⣿⣿⠀⢸⡇⠀⠀⠀⠀⠘⣿⣫⢮⢍⣂⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣾⣟⠿⡃⣀⠀⠀⠀⠹⢦⣀⡈⠿⣿⣿⣿⣿⡿⠃⣀⣿⡿⡆⠀⣠⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣄⠀⠀⠰⣧⡀⠀⠙⣿⣿⣿⣿⣿⣿⣿⠃⢀⡼⠁⠀⠀⠀⡤⣆⣼⣿⣮⢏⢢⣄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢠⣾⠟⣤⡒⠅⠙⠭⢶⠠⢀⡀⠈⠉⠓⠘⠉⠋⠉⠉⠉⠉⢙⣣⣿⡞⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣷⣄⡼⠿⠿⠷⣤⡄⠉⠉⠙⠯⠥⠤⠒⠋⠀⠀⢀⡀⢚⡿⣽⣿⣿⣢⠵⣆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣠⣿⣁⠌⠀⢎⠀⠑⠈⢊⠉⠘⠢⢅⡂⠆⡀⡀⣀⣀⠀⠀⣀⣶⣿⠟⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣦⡠⣄⢀⠀⠀⠀⠀⠀⠀⢀⠀⣀⠴⠒⠦⠄⡌⡑⢿⣿⣿⣿⣇⠐⠯⡽⠀⠀⠀⠀⠀
⠀⠀⠀⠚⣿⣿⣌⠠⢴⠀⠂⠠⢤⠁⠀⡀⠀⠀⠀⠉⠀⠈⠉⠙⣡⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⣷⣄⣄⡉⠁⠻⠌⠃⢈⡉⠀⠀⠐⢢⡀⠁⣀⣴⠟⢻⣿⣿⣿⡒⠬⡙⢅⠄⠀⠀⠀
⠀⠀⠀⢰⣿⣿⡀⢁⣀⠀⢤⣠⣤⣤⡀⠐⢠⠄⠠⠄⠠⠉⠀⠀⢋⡠⠄⠀⠄⣀⠈⢲⣤⠶⢖⠲⡖⠶⠖⡖⠶⠲⠶⠶⣶⣶⣄⠀⠀⠀⠀⠀⠉⠛⠿⣝⡃⢴⡄⠀⠽⠒⠜⠀⠉⢉⠜⠋⠠⢪⣻⢮⡷⠁⠇⠌⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣾⠛⠀⠉⠐⠂⠀⠀⠀⠉⢻⣷⠀⠀⠤⠀⠀⠀⣠⠴⠖⠋⠀⠀⠀⠀⠉⠛⠧⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⢀⣤⣤⣥⣊⠷⠖⠳⠦⠀⠀⢀⠀⠀⣽⡄⠀⢀⣄⡀⣠⣷⡶⠿⠳⠶⠦⣥⣬⣾⣀⣿⡮⠓⠇⠀⠀⠀⠀⠀
⠀⠀⣸⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣧⠀⠀⠰⠖⠈⠉⠀⠀⠘⠃⠀⠀⠀⠀⠀⠀⠀⠉⠉⠻⢟⢄⠀⡄⠀⢀⣿⡿⠋⠉⠀⠀⠀⠀⠀⠀⢠⣤⠀⠠⠿⣰⣀⣿⡼⠉⢉⠁⠀⠀⠀⠀⠀⠀⠉⢻⣿⣿⣰⣧⣛⠅⠀⠀⠀⠀
⠀⠘⠢⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠽⣷⡙⠰⠎⢀⡀⢠⣄⡀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡈⣯⢗⣿⢺⣻⡏⠁⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⢀⡀⠀⣩⡭⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣴⣾⣿⣯⠴⣼⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠛⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⣀⠀⠀⢀⣈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠈⣺⡏⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠈⠁⢀⣉⠰⢆⣀⡀⣀⢙⣻⣶⡿⠿⠿⣿⣿⡇⣰⣧⣙⠃⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠙⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢡⡄⢤⡀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣰⢾⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠰⠚⠿⠋⠈⠀⠀⠀⠉⠋⠁⠁⠀⠀⠀⢹⣿⡌⠴⠛⢁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢠⣾⡿⢿⠞⣀⣀⣀⣀⠤⠀⠀⠀⠄⠀⠈⠓⢤⣤⡌⠉⡀⠀⠀⠀⠀⠀⠀⣀⣠⣤⡴⠾⠿⠿⠿⠷⢦⣄⣀⡀⠀⠀⠀⠀⠀⣀⠠⠤⣀⣀⠶⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢷⣥⢀⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⣾⡅⠀⡴⢋⠵⠂⠀⢀⣠⣀⢡⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣷⣿⡥⠤⠤⠝⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⠖⠒⢐⣒⠚⢒⠚⠛⠃⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⢂⣴⠞⢿⣬⣿⣗⢀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣼⠋⠀⠀⠖⣡⠊⠀⠀⠈⠉⠛⠛⠿⣶⣤⢦⣄⣀⢀⢀⡀⡀⠀⠈⠙⠻⠫⢶⣀⣀⣀⡀⡀⢀⡠⢀⡀⡀⠀⣀⣀⣀⠹⠞⠋⠉⠉⢁⢀⠀⠀⠄⠀⠀⠶⠳⠖⠻⠷⠘⠋⠁⠀⠈⠀⠀⢻⣻⢴⠔⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢸⣿⠀⠀⠀⠚⢡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⠉⠉⠉⠛⠽⠶⠶⢧⣰⣭⣔⣀⠠⠥⣭⣮⠹⠉⢁⣫⣿⣉⠉⣀⠀⣀⢀⡀⠀⠁⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠙⠦⢸⣿⡃⠲⠀⠀⠀⠀⠀
⠀⢠⣾⣏⠀⠀⠀⠀⠓⡦⢤⡖⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠋⠁⠀⠀⠉⠐⠈⠙⠂⠛⠈⠉⠉⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⡀⣄⠙⠶⠆⠸⠱⣿⢶⡸⡀⠀⠀⠀
⠀⢀⣿⠁⠀⠀⠀⠀⠀⠀⣼⣷⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣀⠐⠲⣿⠗⠀⠀⠀⠈⢘⠀⠞⣏⡙⣍⡀⠀
⢀⣼⣿⣿⣀⠀⠀⠀⠀⠀⠁⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣀⡌⠛⠷⠀⠀⠀⠀⠀⠀⠀⠁⠀⢡⢹⣟⠁⡃
⢸⡿⢉⣿⣷⢆⣀⠄⠀⠀⠀⠀⠀⠉⠁⠀⠲⢄⣤⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⠃⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⢰⣦⣸⠍⠁⠀⠀⠀⠀⠀⠀⠀⠈⠀⠄⠎⠸⠬⠀⡀⠀
⣿⣷⡌⠚⣱⣞⣡⡔⠂⠀⠀⠀⠀⠀⠀⠀⠘⠉⠉⠀⠐⣺⠿⠖⡢⣠⠀⠀⠀⠀⣠⠔⡫⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠢⣰⢭⠶⠦⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠜⡰⠝⣼⡅⢨⡀⠀⠀
⢿⣿⣿⣤⠉⠛⠿⣔⡯⢿⠃⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠫⢺⣷⡤⠔⠋⠘⠁⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠒⢶⡦⣀⡀⢷⣜⠻⠿⢶⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣸⡟⠑⢰⣿⡦⢾⠀⠀⠀
⢸⣿⣿⣿⣆⡀⠀⠘⠻⣷⢾⣿⣭⣲⡤⣒⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠍⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣀⡄⢦⣓⣦⡌⠀⠀⡇⡘⠁⣏⡆⡀
⢸⣯⣏⢻⣿⣷⣄⠀⠀⠀⠉⠉⠛⠻⢿⢏⣩⣶⡷⢀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⢟⡒⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⢤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡀⡀⠘⠿⠛⠻⠿⠍⠈⠀⡐⢸⡇⢿⣗⣤⠀
⠘⣿⣾⡏⢽⣿⣿⣿⡄⢀⠀⠀⠀⠀⠠⠉⠙⢃⡾⠯⣦⣤⠤⣤⣤⣴⠶⣾⢿⣿⡼⠔⠀⠀⠀⠀⠀⠀⠀⠀⠈⢤⡌⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠦⣄⣀⡄⠹⣿⠷⠀⠀⠀⠀⠀⠀⢀⣰⣿⣿⣧⢝⠀⠃⠀
⠀⢻⣿⣛⣮⡹⣟⣾⣻⣮⣆⣀⠀⠀⠀⠀⠈⠈⠀⠈⠉⠀⠛⡁⠉⠀⠈⢰⣿⣿⠫⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣷⠸⣦⣠⣀⠀⢠⣤⣀⣀⢰⣆⡀⢰⣾⣶⣴⣿⣤⣙⠿⠻⠷⠀⠀⠀⠀⠀⠀⠀⣴⣻⣿⣯⣿⣟⠉⠀⠀⠀
⠀⢸⣿⣿⣯⣵⣿⣿⣻⠗⣮⣿⣶⣦⡀⠀⣇⡀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠁⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⡮⣉⠛⢋⣉⢙⣷⣿⡙⠿⡯⠿⡏⠈⠀⠉⠀⠀⠀⠀⠀⢠⠶⠀⣠⣾⣿⣿⡾⣯⣿⣗⠢⠀⠀⠀
⠀⠈⣿⣿⣿⣿⣿⣿⣛⣻⣭⠱⣾⢟⠻⣶⣌⣟⡭⠍⠉⠄⠀⠀⠀⠀⠀⠀⠀⠀⣠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠈⠙⠁⠀⠀⠈⠻⡄⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⢠⠏⢀⣤⣿⣿⣿⣿⣷⣻⡽⣍⡗⠁⠀⠀
⠀⠀⢸⣿⡿⣍⣴⣷⣿⣯⣴⣯⡽⠮⣿⠟⣿⣿⣻⣿⣤⡀⠀⠀⠀⠀⣀⣀⣠⠞⠁⠀⢠⠴⣤⠀⡀⠀⢆⡼⡂⠀⠀⠀⠀⠙⢷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣤⠐⣎⡀⢀⡶⠦⠤⢏⣠⣿⣿⣿⣿⡿⢿⣳⣻⣏⠀⠀⠀⠀⠀
⠀⠀⢐⣿⣿⣟⣿⡽⢍⣆⣭⣽⣿⣷⣶⣿⣴⣯⢷⡬⡛⡿⢷⣾⣄⡀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠉⠹⠞⠋⠀⢿⡄⠀⠀⠀⠀⠈⢻⣧⡘⢷⡄⢤⢤⣀⣀⣠⡏⠈⠛⠻⠉⠋⢀⣠⣴⣾⣿⣿⣿⡿⣿⣿⣟⢷⣻⣿⠀⠀⠀⠀⠀
⠀⠀⣲⢸⣿⡶⣿⡿⡿⢛⡏⣭⢩⣿⠿⣛⠻⠶⣈⢷⣦⣝⣶⣽⠿⣿⣷⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠓⢾⠟⠺⠄⠀⡁⡁⠀⣤⣔⣶⣾⣶⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣻⣽⣿⣿⠀⠀⠀⠀⠀
⠀⡈⣔⣿⣿⡇⠀⢳⣤⣶⣼⡿⢛⡭⢓⣴⣿⡿⣛⠟⣞⡺⢿⣯⡁⣭⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⢀⠀⢹⣧⣠⣏⣰⣿⣿⣿⣿⣿⣯⣿⣿⣿⣛⣿⣿⡗⡍⣶⣬⣿⣶⠷⣚⣽⣿⡆⠀⠀⠀⠀
⠠⡥⣭⣾⣿⣷⡾⠟⣛⣩⣾⣿⣿⡾⣟⣭⣿⣗⠺⡟⢛⣹⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣎⣤⣦⣤⣤⡀⠀⠀⠛⠒⢟⢿⣿⣿⣿⣿⡿⣿⣿⣏⣽⣿⣻⣿⢶⣿⢾⣿⣿⣿⣽⣷⣶⣿⣾⣿⣿⣧⠀⠀⠀⠀
⢄⣯⣾⣿⣿⣏⣴⣿⣿⢿⣛⣯⣿⣿⣛⡿⢶⣻⣷⣤⣿⣶⣾⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠏⠆⣛⣍⣦⣝⣻⣿⣶⣤⣀⣄⠀⠿⠝⡿⣿⣿⣿⣿⣿⣿⣻⡿⣷⣾⣟⣿⣛⣶⣿⣿⣿⣿⣿⢿⣷⣎⣿⣿⠀⠀⠀⠀
⣚⠂⣛⣼⡿⠋⠿⠻⠟⠻⠭⠶⠚⠁⠯⠄⠼⠿⣟⣿⣿⣿⡿⣿⠻⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⠹⢠⠄⠾⠛⠉⠠⠉⠙⠳⠻⣿⣿⡦⠀⠀⢻⣼⣿⣿⡿⡿⣿⣻⡹⣿⣽⢿⣛⠞⠻⠻⠿⣿⢿⣿⠿⣿⠋⡿⠛⣿⡄⠀⠀⠀
*/